C51 COMPILER V8.02   POWER                                                                 03/05/2012 13:24:21 PAGE 1   


C51 COMPILER V8.02, COMPILATION OF MODULE POWER
OBJECT MODULE PLACED IN .\Output\Power.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Scaler\Code\Power.c OPTIMIZE(9,SPEED) DEFINE(_PROJECT=_RTD2472D_DEMO_BOARD)
                    - PRINT(.\Output\Power.lst) OBJECT(.\Output\Power.obj)

line level    source

   1          /********************************************************************************/
   2          /*   The  Software  is  proprietary,  confidential,  and  valuable to Realtek   */
   3          /*   Semiconductor  Corporation  ("Realtek").  All  rights, including but not   */
   4          /*   limited  to  copyrights,  patents,  trademarks, trade secrets, mask work   */
   5          /*   rights, and other similar rights and interests, are reserved to Realtek.   */
   6          /*   Without  prior  written  consent  from  Realtek,  copying, reproduction,   */
   7          /*   modification,  distribution,  or  otherwise  is strictly prohibited. The   */
   8          /*   Software  shall  be  kept  strictly  in  confidence,  and  shall  not be   */
   9          /*   disclosed to or otherwise accessed by any third party.                     */
  10          /*   c<2003> - <2010>                                                           */
  11          /*   The Software is provided "AS IS" without any warranty of any kind,         */
  12          /*   express, implied, statutory or otherwise.                                  */
  13          /********************************************************************************/
  14          
  15          //----------------------------------------------------------------------------------------------------
  16          // ID Code      : Power.c No.0000
  17          // Update Note  :
  18          //----------------------------------------------------------------------------------------------------
  19          
  20          #define __POWER__
  21          
  22          #include "Common\Header\Include.h"
  23          
  24          #if(_SCALER_SERIES_TYPE == _RTD2472D_SERIES)
  25          
  26          //--------------------------------------------------
  27          // Description  : Check if the power status changed
  28          // Input Value  : None
  29          // Output Value : Return _TRUE if power status is changed, _FALSE if not
  30          //--------------------------------------------------
  31          bit CPowerHandler(void)
  32          {
  33   1          if(GET_POWERSWITCH())
  34   1          {
  35   2              CPowerControl();
  36   2              CLR_POWERSWITCH();
  37   2      
  38   2              return _TRUE;
  39   2          }
  40   1      
  41   1          return _FALSE;
  42   1      }
  43          
  44          //--------------------------------------------------
  45          // Description  : Execute power up/down process
  46          // Input Value  : None
  47          // Output Value : None
  48          //--------------------------------------------------
  49          void CPowerControl(void)
  50          {
  51   1      #if _DEBUG_MESSAGE_SUPPORT
  52   1      CDebugMessage("CModeResetMode_CPowerControl", 0);
  53   1      #endif
  54   1              CModeResetMode();
C51 COMPILER V8.02   POWER                                                                 03/05/2012 13:24:21 PAGE 2   

  55   1      
  56   1          if(GET_POWERSTATUS())       // Power Down Process
  57   1          {
  58   2      #if _DEBUG_MESSAGE_SUPPORT
  59   2      CDebugMessage("power _off l", 0);
  60   2      #endif
  61   2          
  62   2              g_usDVITMDSFreq = 0;
  63   2      
  64   2      #if((_SCALER_TYPE == _RTD2545LR) && ((_MCU_TYPE == _REALTEK_RTD2120) || (_MCU_TYPE == _REALTEK_RTD2122)))
                      CScalerPageSelect(_PAGE0);
                      //ADC Clock/SOG0/S0G1/Bandgap Power Off
                      CScalerSetBit(_P0_ADC_POWER_C6, ~(_BIT6 | _BIT5 | _BIT4 | _BIT3), 0);
              
                      //Pin_share Setting, XOUT (P6.6) GPIO Pin
                      MCU_PIN_SHARE2_FF02 = 0x0E;
              #endif
  72   2      
  73   2      #if(_SWITCH_INPUT_SOURCE_OSD == _ON)
  74   2              CLR_SOURCE_OSD_STATUS();
  75   2      #endif
  76   2      
  77   2              CLR_POWERSTATUS();
  78   2              CPowerPanelOff();
  79   2              CPowerADCAPLLOff();
  80   2              CPowerLVDSOff();
  81   2              CPowerDPLLOff();
  82   2              CPowerPWMOff();
  83   2              CScalerDisableDisplayTiming();
  84   2              CPowerTMDSOff();
  85   2      
  86   2              CScalerPageSelect(_PAGE1);
  87   2              CScalerSetByte(_P1_BB_POWER0_F0, 0x00);
  88   2              CScalerSetByte(_P1_BB_POWER1_F1, 0x00);
  89   2              CScalerPageSelect(_PAGE0);
  90   2              CScalerSetBit(_P0_ADC_POWER_C6, ~(_BIT6 | _BIT5 | _BIT4 ), _BIT3);
  91   2              CScalerPageSelect(_PAGEB);
  92   2              CScalerSetByte(_PB_DP_PWR_CTL_B4, 0x00);
  93   2      
  94   2              // Disable HDCP
  95   2              CScalerPageSelect(_PAGE2);
  96   2              CScalerSetByte(_P2_HDCP_CTRL_C0, 0x00);
  97   2      
  98   2      #if(_MCU_TYPE == _REALTEK_EMBEDDED)
  99   2            //CMcuSelectFlashClk(_XTAL_CLK);// for DC off high frequency noise issue 2011 0611 zhangping
 100   2            //    CTimerDelayXms(10);
 101   2      #endif
 102   2      
 103   2              CPowerM2PLLOff();
 104   2      #if((_SCALER_TYPE == _RTD2545LR) || (_SCALER_TYPE == _RTD247xRD) || (_SCALER_TYPE == _RTD248xRD))
                      CPowerMPLLOff();
              #endif
 107   2      
 108   2      
 109   2      #if(_SCALER_TYPE == _RTD2472D)
 110   2      
 111   2              CScalerPageSelect(_PAGEB);
 112   2              CScalerSetByte(_PB_DP_Z0_CALIBRATION_B6, 0x00);
 113   2      
 114   2      #elif((_SCALER_TYPE == _RTD2545LR) || (_SCALER_TYPE == _RTD247xRD) || (_SCALER_TYPE == _RTD248xRD))
              
                      CScalerPageSelect(_PAGEB);
C51 COMPILER V8.02   POWER                                                                 03/05/2012 13:24:21 PAGE 3   

                      CScalerSetByte(_PB_DP_Z0_CALIBRATION_B6, 0xF4);
              #endif
 119   2      
 120   2              CScalerSetByte(_HOST_CTRL_01, 0x46);
 121   2              CEepromSaveSystemData();
 122   2      
 123   2      #if(_AUDIO_SUPPORT == _ON)
                      CAdjustAudioControl(_DISABLE);
              #endif
 126   2      
 127   2      
 128   2      #if(_DP_SUPPORT == _ON)
              
              // HPD to Low
              #if(_D0_INPUT_PORT_TYPE == _D0_DP_PORT)
                  D0_HPD_LOW();
              #elif(_D1_INPUT_PORT_TYPE == _D1_DP_PORT)
                  D1_HPD_LOW();
              #endif
              
              #endif //! end if (_DP_SUPPORT == _ON)
 138   2      
 139   2          }
 140   1          else    // Power Up Process
 141   1          {
 142   2      
 143   2      
 144   2      bWatchDogResetCtrl=_TRUE;
 145   2      #if _DEBUG_MESSAGE_SUPPORT
 146   2      CDebugMessage("bWatchDogResetCtrl=true", bWatchDogResetCtrl);
 147   2      #endif
 148   2      
 149   2      #if((_SCALER_TYPE == _RTD2545LR) && ((_MCU_TYPE == _REALTEK_RTD2120) || (_MCU_TYPE == _REALTEK_RTD2122)))
                      //Pin_share Setting, XOUT (P6.6) Clock Pin
                      MCU_PIN_SHARE2_FF02 = 0x1E;
              #endif
 153   2      
 154   2              SET_POWERSTATUS();
 155   2              CScalerInitial();
 156   2      
 157   2      #if(_MCU_TYPE == _REALTEK_EMBEDDED)
 158   2              MCU_SCA_INF_ADDR_FFF4 = 0x01; //DDC_addr- Host Ctrl
 159   2              MCU_SCA_INF_DATA_FFF5 = 0x00; //DDC_data - Disable power-saving mode
 160   2              CTimerDelayXms(10);
 161   2              CMcuSelectFlashClk(_FLASH_CLK);
 162   2      #endif
 163   2      
 164   2              CEepromSaveSystemData();
 165   2      #if(_DP_SUPPORT == _ON)
                      SET_INPUT_SOURCE_SEARCH();
              #endif //End of #if(_DP_SUPPORT == _ON)
 168   2          }
 169   1      }
 170          
 171          //--------------------------------------------------
 172          // Description  : Set panel on process
 173          // Input Value  : None
 174          // Output Value : None
 175          //--------------------------------------------------
 176          void CPowerPanelOn(void)
 177          {
 178   1          if(GET_PANELPOWERSTATUS() == _OFF)
C51 COMPILER V8.02   POWER                                                                 03/05/2012 13:24:21 PAGE 4   

 179   1          {
 180   2      #if(_PANEL_TYPE == _CMO_LVDS_22_WSXGA_PLUS)
                      CPowerDisplayPortOn();
                      CTimerDelayXms(40);
                      CScalerEnableDisplayOutput();
              
                      CScalerSetBit(_VDISP_CTRL_28, ~_BIT5, _BIT5);
                      CAdjustBackgroundColor(255, 255, 255);
                      CTimerDelayXms(40);
                      CPowerPanelPowerOn();
                      CTimerDelayXms(250);
              
              #if((_OD_SUPPORT == _ON) || (_FRC_SUPPORT == _ON))
                      if((bit)CScalerGetBit(_VDISP_CTRL_28, _BIT3) || GET_FRCSTATUS())
                      {
                          CScalerSetBit(_VDISP_CTRL_28, ~_BIT5, 0x00);
                      }
              #endif
              
                     // CAdjustBackgroundColor(0,0,0);//Bug 2006_10_01
              #else
 200   2              CPowerPanelPowerOn();
 201   2              CTimerDelayXms(_PANEL_POWER_ON_T1);
 202   2              CPowerDisplayPortOn();
 203   2              CScalerEnableDisplayOutput();
 204   2              CTimerDelayXms(_PANEL_POWER_ON_T3);
 205   2      #endif
 206   2          }
 207   1      
 208   1          CPowerLightPowerOn();
 209   1          CMiscClearStatusRegister();
 210   1              //bData=0;
 211   1              bTimer01minCtrl= _FALSE ;// for power bug 20110804_sjp
 212   1      }
 213          
 214          //--------------------------------------------------
 215          // Description  : Set panel off process
 216          // Input Value  : None
 217          // Output Value : None
 218          //--------------------------------------------------
 219          void CPowerPanelOff(void)
 220          {
 221   1          CPowerLightPowerOff();
 222   1      
 223   1      #if((_PANEL_STYLE == _PANEL_TTL) || (_PANEL_STYLE == _PANEL_LVDS))
 224   1      
 225   1          CTimerDelayXms(_PANEL_POWER_OFF_T4);
 226   1          //     CScalerDisableDisplayOutput();
 227   1      
 228   1          CPowerDisplayPortOff();
 229   1          CTimerDelayXms(_PANEL_POWER_OFF_T5);
 230   1          CPowerPanelPowerOff();
 231   1      
 232   1      #endif // End of #if((_PANEL_STYLE == _PANEL_TTL) || (_PANEL_STYLE == _PANEL_LVDS))
 233   1      
 234   1      
 235   1      #if(_PANEL_STYLE == _PANEL_RSDS)
              
                  //--- BACKLIGHT OFF TO DATA OFF TIME ---------------
                  CScalerSetBit(_VDISP_CTRL_28, ~_BIT5, _BIT5);
                  CAdjustBackgroundColor(255, 255, 255);
                  CTimerDelayXms(200);
C51 COMPILER V8.02   POWER                                                                 03/05/2012 13:24:21 PAGE 5   

                  CScalerSetBit(_VDISP_CTRL_28, 0xDF, 0x20);//MUTE ON
                  // CScalerDisableDisplayOutput();
                  CPowerPanelPowerOff();
                  CPowerDisplayPortOff();
                  //--- DATA OFF TO PANEL OFF TIME ---------------
                  CScalerSetBit(_VDISP_CTRL_28, 0xDF, 0x00);//MUTE OFF
              
              #endif
 249   1      
 250   1          // The delay below is to prevent from short period between panel OFF and next ON
 251   1          CTimerDelayXms(_PANEL_POWER_OFF_T6);
 252   1      }
 253          
 254          //--------------------------------------------------
 255          // Description  : Set panel power on
 256          // Input Value  : None
 257          // Output Value : None
 258          //--------------------------------------------------
 259          void CPowerPanelPowerOn(void)
 260          {
 261   1          PANELPOWER_UP();
 262   1          SET_PANELPOWERSTATUS();
 263   1      }
 264          
 265          //--------------------------------------------------
 266          // Description  : Set panel power off
 267          // Input Value  : None
 268          // Output Value : None
 269          //--------------------------------------------------
 270          void CPowerPanelPowerOff(void)
 271          {
 272   1          PANELPOWER_DOWN();
 273   1          CLR_PANELPOWERSTATUS();
 274   1      }
 275          
 276          //--------------------------------------------------
 277          // Description  : Set backlight power on
 278          // Input Value  : None
 279          // Output Value : None
 280          //--------------------------------------------------
 281          void CPowerLightPowerOn(void)
 282          {
 283   1      #ifdef _DEBUG_MESSAGE_SUPPORT
 284   1      CDebugMessage("LIGHTPOWER_UP_CPowerLightPowerOn",0);
 285   1      #endif
 286   1      
 287   1          LIGHTPOWER_UP();
 288   1          SET_LIGHTPOWERSTATUS();
 289   1      }
 290          
 291          //--------------------------------------------------
 292          // Description  : Set backlight power off
 293          // Input Value  : None
 294          // Output Value : None
 295          //--------------------------------------------------
 296          void CPowerLightPowerOff(void)
 297          {
 298   1          LIGHTPOWER_DOWN();
 299   1          CLR_LIGHTPOWERSTATUS();
 300   1      }
 301          
 302          //--------------------------------------------------
C51 COMPILER V8.02   POWER                                                                 03/05/2012 13:24:21 PAGE 6   

 303          // Description  : Power on display port
 304          // Input Value  : None
 305          // Output Value : None
 306          //--------------------------------------------------
 307          void CPowerDisplayPortOn(void)
 308          {
 309   1      
 310   1      #if((_PANEL_STYLE == _PANEL_TTL) || (_PANEL_STYLE == _PANEL_LVDS))
 311   1      
 312   1          CPowerLVDSOn();
 313   1      
 314   1      #endif
 315   1      
 316   1      #if(_PANEL_STYLE == _PANEL_RSDS)
              
                  CPowerRSDSOn();
              
              #endif
 321   1      
 322   1      }
 323          
 324          //--------------------------------------------------
 325          // Description  : Power off display port
 326          // Input Value  : None
 327          // Output Value : None
 328          //--------------------------------------------------
 329          void CPowerDisplayPortOff(void)
 330          {
 331   1      
 332   1      #if((_PANEL_STYLE == _PANEL_TTL) || (_PANEL_STYLE == _PANEL_LVDS))
 333   1      
 334   1          CPowerLVDSOff();
 335   1      
 336   1      #endif // End of #if(_PANEL_STYLE == _PANEL_TTL)
 337   1      
 338   1      
 339   1      #if(_PANEL_STYLE == _PANEL_RSDS)
              
                  CPowerRSDSOff();
              
              #endif // End of #if(_PANEL_STYLE == _PANEL_RSDS)
 344   1      
 345   1      }
 346          
 347          //--------------------------------------------------
 348          // Description  : Power on LVDS
 349          // Input Value  : None
 350          // Output Value : None
 351          //--------------------------------------------------
 352          void CPowerLVDSOn(void)
 353          {
 354   1          if((bit)(_DISP_OUTPUT_PORT))
 355   1          {
 356   2              CScalerSetDataPortByte(_TCON_ADDR_PORT_8B, _TCON_LVDS_CTRL0_A0, 0x70);
 357   2          }
 358   1          else
 359   1          {
 360   2              //LVDS from even port, if from odd port, the below value should be 0x20
 361   2              CScalerSetDataPortByte(_TCON_ADDR_PORT_8B, _TCON_LVDS_CTRL0_A0, 0x70);
 362   2          }
 363   1      
 364   1      }
C51 COMPILER V8.02   POWER                                                                 03/05/2012 13:24:21 PAGE 7   

 365          
 366          //--------------------------------------------------
 367          // Description  : Power off LVDS
 368          // Input Value  : None
 369          // Output Value : None
 370          //--------------------------------------------------
 371          void CPowerLVDSOff(void)
 372          {
 373   1          CScalerSetDataPortByte(_TCON_ADDR_PORT_8B, _TCON_LVDS_CTRL0_A0, 0x40);
 374   1      
 375   1      }
 376          
 377          #if(_PANEL_STYLE == _PANEL_RSDS)
              //--------------------------------------------------
              // Description  : Power on RSDS
              // Input Value  : None
              // Output Value : None
              //--------------------------------------------------
              void CPowerRSDSOn(void)
              {
                  CPowerLVDSOn();
                  CScalerSetDataPortByte(_TCON_ADDR_PORT_8B, _TCON_CTRL0_00, 0xc6);//for 8-bit RSDS panel
                  CTimerDelayXms(40);
                  CScalerSetDataPortByte(_TCON_ADDR_PORT_8B, _TCON_CTRL0_00, 0x86);
                  CScalerSetDataPortByte(_TCON_ADDR_PORT_8B, _TCON_RSDS_PWR_CTL_C3, 0x03);
                 //2007_09_05_Edward
                  CScalerSetDataPortByte(_TCON_ADDR_PORT_8B, _TCON_LVDS_CTRL0_A0, 0x70);
              }
              
              //--------------------------------------------------
              // Description  : Power off RSDS
              // Input Value  : None
              // Output Value : None
              //--------------------------------------------------
              void CPowerRSDSOff(void)
              {
                  //Issac 2007-01-05
                  CPowerLVDSOff();
                  CScalerSetBit(_VDISP_CTRL_28, ~_BIT1, _BIT1); // Force HS/VS/DEN/Data to 0
                  CScalerSetDataPortByte(_TCON_ADDR_PORT_8B, _TCON_RSDS_PWR_CTL_C3, 0x00); //Even,Odd Port Power Off
                  CTimerDelayXms(40);
                  CScalerSetDataPortByte(_TCON_ADDR_PORT_8B, _TCON_CTRL0_00, 0x48); // TTL output 0
                  CTimerDelayXms(40);
                  CScalerSetDataPortByte(_TCON_ADDR_PORT_8B, _TCON_CTRL0_00, 0x42); // Back to HZ
              
                  CScalerSetBit(_VDISP_CTRL_28, ~_BIT1, 0); // Release force
                  //2007_09_05_Edward
                  CScalerSetDataPortByte(_TCON_ADDR_PORT_8B, _TCON_LVDS_CTRL0_A0, 0x00);
              }
              
              #endif // End of #if(_PANEL_STYLE == _PANEL_RSDS)
 416          
 417          //--------------------------------------------------
 418          // Description  : Power on ADC and APLL
 419          // Input Value  : None
 420          // Output Value : None
 421          //--------------------------------------------------
 422          void CPowerADCAPLLOn(void)
 423          {
 424   1          CScalerPageSelect(_PAGE1);
 425   1          CScalerSetBit(_P1_PLL_WD_AF, ~_BIT0, 0x00);     // Power up PLL
 426   1      
C51 COMPILER V8.02   POWER                                                                 03/05/2012 13:24:21 PAGE 8   

 427   1          CScalerPageSelect(_PAGE0);
 428   1          CScalerSetBit(_P0_ADC_POWER_C6, ~(_BIT2 | _BIT1 | _BIT0), (_BIT2 | _BIT1 | _BIT0));    // Power up ADC
 429   1      }
 430          
 431          //--------------------------------------------------
 432          // Description  : Power off ADC and APLL
 433          // Input Value  : None
 434          // Output Value : None
 435          //--------------------------------------------------
 436          void CPowerADCAPLLOff(void)
 437          {
 438   1          CScalerPageSelect(_PAGE1);
 439   1          CScalerSetBit(_P1_PLL_WD_AF, ~_BIT0, _BIT0);     // Power down PLL
 440   1      
 441   1          CScalerPageSelect(_PAGE0);
 442   1          CScalerSetBit(_P0_ADC_POWER_C6, ~(_BIT2 | _BIT1 | _BIT0), 0x00);    // Power down ADC
 443   1      }
 444          
 445          #if((_TMDS_SUPPORT == _ON) || (_HDMI_SUPPORT == _ON) || (_DP_SUPPORT == _ON))
 446          //--------------------------------------------------
 447          // Description  : Power on TMDS
 448          // Input Value  : None
 449          // Output Value : None
 450          //--------------------------------------------------
 451          void CPowerTMDSOn(void)
 452          {
 453   1          CScalerSetBit(_SYNC_CTRL_49, ~(_BIT1 | _BIT0), 0x00);
 454   1      }
 455          #endif
 456          
 457          //--------------------------------------------------
 458          // Description  : Power off TMDS
 459          // Input Value  : None
 460          // Output Value : None
 461          //--------------------------------------------------
 462          void CPowerTMDSOff(void)
 463          {
 464   1          CScalerPageSelect(_PAGE2);
 465   1          CScalerSetBit(_P2_TMDS_OUTPUT_CTRL_A6, ~(_BIT7 | _BIT6 | _BIT5 | _BIT4 | _BIT3), 0x00);
 466   1      }
 467          
 468          //--------------------------------------------------
 469          // Description  : Power off DPLL
 470          // Input Value  : None
 471          // Output Value : None
 472          //--------------------------------------------------
 473          void CPowerDPLLOff(void)
 474          {
 475   1          CScalerPageSelect(_PAGE1);
 476   1      #if(_SCALER_TYPE == _RTD2472D)
 477   1          CScalerSetBit(_P1_DPLL_N_C0, ~_BIT7, _BIT7); // Power down DPLL
 478   1      #elif((_SCALER_TYPE == _RTD2545LR) || (_SCALER_TYPE == _RTD247xRD) || (_SCALER_TYPE == _RTD248xRD))
                  CScalerSetBit(_P1_DPLL_WD_C2, ~_BIT0, _BIT0); // Power down DPLL
              #else
                  No Setting !!
              #endif  // End of #if(_SCALER_TYPE == _RTD2472D)
 483   1      }
 484          
 485          //--------------------------------------------------
 486          // Description  : Power on M2PLL
 487          // Input Value  : None
 488          // Output Value : None
C51 COMPILER V8.02   POWER                                                                 03/05/2012 13:24:21 PAGE 9   

 489          //--------------------------------------------------
 490          void CPowerM2PLLOn(void)
 491          {
 492   1          CScalerSetBit(_HOST_CTRL_01, ~_BIT1, 0x00);
 493   1      
 494   1          CScalerPageSelect(_PAGE1);
 495   1      
 496   1      #if(_SCALER_TYPE == _RTD2472D)
 497   1          CScalerSetBit(_P1_MULTIPLY_PLL_CTRL3_E5, ~_BIT0, _BIT0); // Power up M2PLL
 498   1      #elif((_SCALER_TYPE == _RTD2545LR) || (_SCALER_TYPE == _RTD247xRD) || (_SCALER_TYPE == _RTD248xRD))
                  CScalerSetBit(_P1_M2PLL_WD_E5, ~_BIT0, 0); // Power up M2PLL
              #else
                  No Setting !!
              #endif
 503   1      }
 504          
 505          //--------------------------------------------------
 506          // Description  : Power off M2PLL
 507          // Input Value  : None
 508          // Output Value : None
 509          //--------------------------------------------------
 510          void CPowerM2PLLOff(void)
 511          {
 512   1      #if(_MCU_TYPE == _REALTEK_EMBEDDED)
 513   1          CMcuSelectFlashClk(_XTAL_CLK);   // for DC off high frequency noise issue 2011 0611 zhangping
 514   1          CTimerDelayXms(10);
 515   1      
 516   1      #endif
 517   1          CScalerPageSelect(_PAGE1);
 518   1      
 519   1      #if(_SCALER_TYPE == _RTD2472D)
 520   1          CScalerSetBit(_P1_MULTIPLY_PLL_CTRL3_E5, ~_BIT0, 0x00); // Power down M2PLL
 521   1      #elif((_SCALER_TYPE == _RTD2545LR) || (_SCALER_TYPE == _RTD247xRD) || (_SCALER_TYPE == _RTD248xRD))
                  CScalerSetBit(_P1_M2PLL_WD_E5, ~_BIT0, _BIT0); // Power down M2PLL
              #else
                 No Setting !!
              #endif  // End of #if(_SCALER_TYPE == _RTD2472D)
 526   1      
 527   1          // V013 VGA Patch Note (6) Modify 20100428 Start
 528   1          // Patch Reason : Use M2PLL as internal clock in analog source.
 529   1         CScalerSetBit(_FIFO_FREQUENCY_22, ~_BIT2, 0x00);
 530   1          // V013 VGA Patch Note (6) Modify 20100428 End
 531   1      }
 532          
 533          #if((_SCALER_TYPE == _RTD2545LR) || (_SCALER_TYPE == _RTD247xRD) || (_SCALER_TYPE == _RTD248xRD))
              //--------------------------------------------------
              // Description  : Power off MPLL
              // Input Value  : None
              // Output Value : None
              //--------------------------------------------------
              void CPowerMPLLOff(void)
              {
                  CScalerPageSelect(_PAGE0);
                  CScalerSetBit(_P0_MPLL_WD_F8, ~(_BIT0), _BIT0);
              }
              #endif //End of if((_SCALER_TYPE == _RTD2545LR) || (_SCALER_TYPE == _RTD247xRD) || (_SCALER_TYPE == _RTD24
             -8xRD))
 545          
 546          //--------------------------------------------------
 547          // Description  : Power on PWM
 548          // Input Value  : None
 549          // Output Value : None
C51 COMPILER V8.02   POWER                                                                 03/05/2012 13:24:21 PAGE 10  

 550          //--------------------------------------------------
 551          void CPowerPWMOn(void)
 552          {
 553   1      #if(_SCALER_TYPE == _RTD2545LR)
                  pData[0] = 0x40;
                  pData[1] = 0x02;
                  pData[2] = 0x10;
                  CScalerWrite(_OSD_ADDR_MSB_90, 3, pData, _AUTOINC);
              
              #elif((_SCALER_TYPE == _RTD2472D) || (_SCALER_TYPE == _RTD247xRD) || (_SCALER_TYPE == _RTD248xRD))
 560   1          MCU_PWM_EN_FF48 |= (((BYTE)_PWM5_EN << 5) | ((BYTE)_PWM4_EN << 4) | ((BYTE)_PWM3_EN << 3) | ((BYTE)_PW
             -M2_EN << 2) | ((BYTE)_PWM1_EN << 1) | ((BYTE)_PWM0_EN));
 561   1      
 562   1      #endif
 563   1      }
 564          
 565          //--------------------------------------------------
 566          // Description  : Power off PWM
 567          // Input Value  : None
 568          // Output Value : None
 569          //--------------------------------------------------
 570          void CPowerPWMOff(void)
 571          {
 572   1      #if(_SCALER_TYPE == _RTD2545LR)
                  pData[0] = 0x40;
                  pData[1] = 0x02;
                  pData[2] = 0x00;
                  CScalerWrite(_OSD_ADDR_MSB_90, 3, pData, _AUTOINC);
              
              #elif((_SCALER_TYPE == _RTD2472D) || (_SCALER_TYPE == _RTD247xRD) || (_SCALER_TYPE == _RTD248xRD))
 579   1          MCU_PWM_EN_FF48 &= ~(_BIT5 | _BIT4 | _BIT3 | _BIT2 | _BIT1 | _BIT0);
 580   1      
 581   1      #endif
 582   1      }
 583          
 584          #endif  // End of #if(_SCALER_SERIES_TYPE == _RTD2472D_SERIES)
 585          
 586          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    567    ----
   CONSTANT SIZE    =     99    ----
   XDATA SIZE       =      1    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
