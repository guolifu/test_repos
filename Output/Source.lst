C51 COMPILER V8.02   SOURCE                                                                03/05/2012 13:24:22 PAGE 1   


C51 COMPILER V8.02, COMPILATION OF MODULE SOURCE
OBJECT MODULE PLACED IN .\Output\Source.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Scaler\Code\Source.c OPTIMIZE(9,SPEED) DEFINE(_PROJECT=_RTD2472D_DEMO_BOARD
                    -) PRINT(.\Output\Source.lst) OBJECT(.\Output\Source.obj)

line level    source

   1          /********************************************************************************/
   2          /*   The  Software  is  proprietary,  confidential,  and  valuable to Realtek   */
   3          /*   Semiconductor  Corporation  ("Realtek").  All  rights, including but not   */
   4          /*   limited  to  copyrights,  patents,  trademarks, trade secrets, mask work   */
   5          /*   rights, and other similar rights and interests, are reserved to Realtek.   */
   6          /*   Without  prior  written  consent  from  Realtek,  copying, reproduction,   */
   7          /*   modification,  distribution,  or  otherwise  is strictly prohibited. The   */
   8          /*   Software  shall  be  kept  strictly  in  confidence,  and  shall  not be   */
   9          /*   disclosed to or otherwise accessed by any third party.                     */
  10          /*   c<2003> - <2010>                                                           */
  11          /*   The Software is provided "AS IS" without any warranty of any kind,         */
  12          /*   express, implied, statutory or otherwise.                                  */
  13          /********************************************************************************/
  14          
  15          //----------------------------------------------------------------------------------------------------
  16          // ID Code      : Source.c No.0000
  17          // Update Note  :
  18          //----------------------------------------------------------------------------------------------------
  19          
  20          #define __SOURCE__
  21          
  22          #include "Common\Header\Include.h"
  23          
  24          #if(_SCALER_SERIES_TYPE == _RTD2472D_SERIES)
  25          
  26          
  27          //--------------------------------------------------
  28          // Description  : Measure Source type
  29          // Input Value  : None
  30          // Output Value : Return _TRUE if succeed
  31          //--------------------------------------------------
  32          bit CSourceHandler(void)
  33          {
  34   1          if(GET_INPUTSOURCE_TYPE() == _SOURCE_NONE)
  35   1          {
  36   2          #if _DEBUG_MESSAGE_SUPPORT
  37   2      
  38   2      CDebugMessage("GET_INPUTSOURCE_TYPE() == _SOURCE_NONE", 0);
  39   2              #endif
  40   2              if(CSourceScanHandler())
  41   2              {
  42   3                  return _TRUE;
  43   3              }
  44   2              else
  45   2              {
  46   3                  return _FALSE;
  47   3              }
  48   2          }
  49   1      
  50   1          return _TRUE;
  51   1      }
  52          
  53          //--------------------------------------------------
  54          // Description  : Scan all input port and select active port
C51 COMPILER V8.02   SOURCE                                                                03/05/2012 13:24:22 PAGE 2   

  55          // Input Value  : None
  56          // Output Value : Return _TRUE if the selected input source is exist
  57          //--------------------------------------------------
  58          bit CSourceScanHandler(void)
  59          {
  60   1          if(g_ucSearchTimes > 0)                         // Scan same source until search time was zero.
  61   1          {
  62   2              #if _DEBUG_MESSAGE_SUPPORT
  63   2      //      CDebugMessage("CSourceScanInputPort_CSourceScanHandler", 0);
  64   2              #endif
  65   2              if(CSourceScanInputPort())
  66   2              {
  67   3                  // For giving DP more times
  68   3                  g_ucModeStableCount = 29;
  69   3      
  70   3                  if(g_ucSearchTimes >= 1)
  71   3                  {
  72   4                      g_ucSearchTimes -= 1;
  73   4                  }
  74   3                  else
  75   3                  {
  76   4                      g_ucSearchTimes = 0;
  77   4                  }
  78   3      
  79   3                  CLR_SEARCH_FINISH();
  80   3      
  81   3      #if(_YPBPR_SUPPORT == _ON)
  82   3                  if((GET_INPUTSOURCE_TYPE() == _SOURCE_VGA) || (GET_INPUTSOURCE_TYPE() == _SOURCE_YPBPR))
  83   3      #else
                          if(GET_INPUTSOURCE_TYPE() == _SOURCE_VGA)
              #endif
  86   3                  {
  87   4                      SET_VGA_INITIAL();
  88   4                  }
  89   3      
  90   3                  return _TRUE;
  91   3              }
  92   2              else
  93   2              {
  94   3      
  95   3                  if(g_ucSearchTimes >= 1)
  96   3                  {
  97   4                      g_ucSearchTimes -= 1;
  98   4                  }
  99   3                  else
 100   3                  {
 101   4                      g_ucSearchTimes = 0;
 102   4                  }
 103   3      
 104   3                  SET_INPUTSOURCE_TYPE(_SOURCE_NONE);
 105   3              }
 106   2          }
 107   1          else
 108   1          {
 109   2              CSourceSwitchPortSetting();
 110   2      
 111   2              if(g_ucSearchFinish >= sizeof(tINPUT_PORT)) // Scan finish with no signal.
 112   2              {
 113   3                  SET_SEARCH_FINISH();
 114   3                  g_ucSearchFinish = 0;
 115   3              }
 116   2                      
C51 COMPILER V8.02   SOURCE                                                                03/05/2012 13:24:22 PAGE 3   

 117   2      
 118   2                      
 119   2          }
 120   1      
 121   1          return _FALSE;
 122   1      }
 123          
 124          //--------------------------------------------------
 125          // Description  : Check connect pin and scan all input port to obtain if the signal is available
 126          // Input Value  : None
 127          // Output Value : Return _TRUE if the selected input source is exist
 128          //--------------------------------------------------
 129          bit CSourceScanInputPort(void)
 130          {
 131   1      #if _DEBUG_MESSAGE_SUPPORT
 132   1      CDebugMessage("g_ucSearchIndex_csourcescanibputport==", g_ucSearchIndex); 
 133   1      #endif
 134   1      //if(g_ucSearchIndex>1)g_ucSearchIndex=0;//sjp20111206
 135   1          if(GET_INPUTPORT_TYPE(g_ucSearchIndex) != _NO_PORT)
 136   1          {
 137   2              if(GET_SEARCH_INITIAL() == _TRUE)
 138   2              {
 139   3      
 140   3      #if(_DP_SUPPORT == _ON)
                          if((GET_INPUTPORT_TYPE(g_ucSearchIndex) == _D0_DP_PORT) || (GET_INPUTPORT_TYPE(g_ucSearchIndex
             -) == _D1_DP_PORT))
                          {
              #if((_SCALER_TYPE == _RTD247xRD) || (_SCALER_TYPE == _RTD248xRD) || (_SCALER_TYPE == _RTD2472D))
                              CSyncInputPort2DInitial();
              #endif
              
                              g_bDpFakeLT = 0;
              
                              g_usDVITMDSFreq = 0;
                          }
                          else if((GET_INPUTPORT_TYPE(g_ucSearchIndex) == _D0_HDMI_PORT)
                               || (GET_INPUTPORT_TYPE(g_ucSearchIndex) == _D1_HDMI_PORT)
                               || (GET_INPUTPORT_TYPE(g_ucSearchIndex) == _D0_DVI_PORT)
                               || (GET_INPUTPORT_TYPE(g_ucSearchIndex) == _D1_DVI_PORT)
                               || (GET_INPUTPORT_TYPE(g_ucSearchIndex) == _D0_DVI_I_PORT)
                               || (GET_INPUTPORT_TYPE(g_ucSearchIndex) == _D1_DVI_I_PORT))
                          {
                              g_bHDMISearchTimesResetFlag = 1;
                              CDpHDCPReset();
              
                              g_bDpFakeLT = 1;
                              g_bFakeTPEndPass = _TRUE;
              
                          }
                          else
                          {
              
              #if((_SCALER_TYPE == _RTD247xRD) || (_SCALER_TYPE == _RTD248xRD) || (_SCALER_TYPE == _RTD2472D))
              
                              CSyncInputPort2DInitial();
              #endif
              
                              CDpHDCPReset();
              
                              g_bDpFakeLT = 1;
              
                              g_usDVITMDSFreq = 0;
C51 COMPILER V8.02   SOURCE                                                                03/05/2012 13:24:22 PAGE 4   

              
                          }
              
                          if(GET_INPUT_SOURCE_SEARCH())
                          {
                              g_ucDisplayPortLtPreStatus = _TRAINING_PATTERN_NONE;
                              CLR_DPHOTPLUG();
                              g_bDpCPIRQ = _FALSE;
                              CDpHotPlugProc(20);
                          }
              
                          CLR_INPUT_SOURCE_SEARCH();
              
              #else
 192   3      
 193   3      #if((_SCALER_TYPE == _RTD247xRD) || (_SCALER_TYPE == _RTD248xRD) || (_SCALER_TYPE == _RTD2472D))
 194   3                  if((GET_INPUTPORT_TYPE(g_ucSearchIndex) == _D0_HDMI_PORT)
 195   3                    || (GET_INPUTPORT_TYPE(g_ucSearchIndex) == _D1_HDMI_PORT)
 196   3                    || (GET_INPUTPORT_TYPE(g_ucSearchIndex) == _D0_DVI_PORT)
 197   3                    || (GET_INPUTPORT_TYPE(g_ucSearchIndex) == _D1_DVI_PORT)
 198   3                    || (GET_INPUTPORT_TYPE(g_ucSearchIndex) == _D0_DVI_I_PORT)
 199   3                    || (GET_INPUTPORT_TYPE(g_ucSearchIndex) == _D1_DVI_I_PORT))
 200   3                  {
 201   4                      g_bHDMISearchTimesResetFlag = 1;
 202   4      
 203   4                  }
 204   3                  else
 205   3                  {
 206   4                      CSyncInputPort2DInitial();
 207   4                      g_usDVITMDSFreq = 0;
 208   4                  }
 209   3      #endif
 210   3      
 211   3      #if(_SCALER_TYPE == _RTD2472D)
 212   3                  if((GET_INPUTPORT_TYPE(g_ucSearchIndex) == _D0_HDMI_PORT)
 213   3                  || (GET_INPUTPORT_TYPE(g_ucSearchIndex) == _D1_HDMI_PORT)
 214   3                  || (GET_INPUTPORT_TYPE(g_ucSearchIndex) == _D0_DVI_PORT)
 215   3                  || (GET_INPUTPORT_TYPE(g_ucSearchIndex) == _D1_DVI_PORT)
 216   3                  || (GET_INPUTPORT_TYPE(g_ucSearchIndex) == _D0_DVI_I_PORT)
 217   3                  || (GET_INPUTPORT_TYPE(g_ucSearchIndex) == _D1_DVI_I_PORT))
 218   3                  {
 219   4                      // Search Port is not the same with prenious port, need HDCP Auto Reset
 220   4                      if(GET_INPUT_PORT(g_ucSearchIndex) != g_ucFormerSearchPort)
 221   4                      {
 222   5                          CScalerPageSelect(_PAGE2);
 223   5                          CScalerSetDataPortBit(_P2_HDCP_ADDR_PORT_C3, 0xC4, ~_BIT4, _BIT4);
 224   5                          CScalerSetDataPortBit(_P2_HDCP_ADDR_PORT_C3, 0xC4, ~_BIT4, 0x00);
 225   5                      }
 226   4                  }
 227   3                  g_ucFormerSearchPort = GET_INPUT_PORT(g_ucSearchIndex);
 228   3      #endif
 229   3      
 230   3      
 231   3      #endif  // End of #if(_DP_SUPPORT == _ON)
 232   3      #if _DEBUG_MESSAGE_SUPPORT
 233   3      //CDebugMessage("CScalerResetProcess_CSourceScanInputPort", 0);
 234   3      #endif 
 235   3                  CScalerResetProcess();
 236   3                  SET_TMDS_INITIAL();
 237   3      
 238   3                  CLR_SEARCH_INITIAL();
 239   3      
C51 COMPILER V8.02   SOURCE                                                                03/05/2012 13:24:22 PAGE 5   

 240   3              }   // End of if(GET_SEARCH_INITIAL() == _TRUE)
 241   2      
 242   2              switch(GET_INPUT_PORT(g_ucSearchIndex))
 243   2              {
 244   3                 /********************/
 245   3                  case _D0_INPUT_PORT:
 246   3                 /********************/
 247   3      #if((_D0_INPUT_PORT_TYPE == _D0_DVI_PORT) || (_D0_INPUT_PORT_TYPE == _D0_HDMI_PORT))
 248   3                      if(CSyncScanInputPortDVI())
 249   3                      {
 250   4                          return _TRUE;
 251   4                      }
 252   3                      else
 253   3                      {
 254   4                          break;
 255   4                      }
 256   3      #endif
 257   3      
 258   3      #if(_DP_SUPPORT == _ON)
              #if(_D0_INPUT_PORT_TYPE == _D0_DP_PORT)
                              if(CSyncScanInputPortDP())
                              {
                                  return _TRUE;
                              }
                              else
                              {
                                  break;
                              }
              #endif
              #endif
 270   3      
 271   3      
 272   3      #if(_D0_INPUT_PORT_TYPE == _D0_DVI_I_PORT)
                  #if(_DVI_I_SEARCH == _DVI_FIRST)
                              if(CSyncScanInputPortDVI())
                              {
                                  return _TRUE;
                              }
              
                              if(CSyncScanInputPortVGA())
                              {
                                  return _TRUE;
                              }
                              else
                              {
                                  break;
                              }
                  #else
                              if(CSyncScanInputPortVGA())
                              {
                                  return _TRUE;
                              }
              
                              if(CSyncScanInputPortDVI())
                              {
                                  return _TRUE;
                              }
                              else
                              {
                                  break;
                              }
                  #endif
C51 COMPILER V8.02   SOURCE                                                                03/05/2012 13:24:22 PAGE 6   

              #endif
 303   3      
 304   3      
 305   3      #if((_D0_INPUT_PORT_TYPE == _D0_VIDEO8_PORT) && (_VIDEO_SUPPORT == _ON))
                              if(CVideoIsExist())
                              {
                                  return _TRUE;
                              }
                              else
                              {
                                  break;
                              }
              #endif
 315   3                  break;
 316   3      
 317   3      
 318   3                 /********************/
 319   3                  case _D1_INPUT_PORT:
 320   3                 /********************/
 321   3      #if((_D1_INPUT_PORT_TYPE == _D1_DVI_PORT) || (_D1_INPUT_PORT_TYPE == _D1_HDMI_PORT))
                              if(CSyncScanInputPortDVI())
                              {
                                  return _TRUE;
                              }
                              else
                              {
                                  break;
                              }
              #endif
 331   3      
 332   3      #if(_DP_SUPPORT == _ON)
              #if(_D1_INPUT_PORT_TYPE == _D1_DP_PORT)
                              if(CSyncScanInputPortDP())
                              {
                                  return _TRUE;
                              }
                              else
                              {
                                  break;
                              }
              #endif
              #endif
 344   3      
 345   3      #if(_D1_INPUT_PORT_TYPE == _D1_DVI_I_PORT)
                  #if(_DVI_I_SEARCH == _DVI_FIRST)
                              if(CSyncScanInputPortDVI())
                              {
                                  return _TRUE;
                              }
              
                              if(CSyncScanInputPortVGA())
                              {
                                  return _TRUE;
                              }
                              else
                              {
                                  break;
                              }
                  #else
                              if(CSyncScanInputPortVGA())
                              {
                                  return _TRUE;
C51 COMPILER V8.02   SOURCE                                                                03/05/2012 13:24:22 PAGE 7   

                              }
              
                              if(CSyncScanInputPortDVI())
                              {
                                  return _TRUE;
                              }
                              else
                              {
                                  break;
                              }
                  #endif
              #endif
 376   3                  break;
 377   3      
 378   3      
 379   3                 /********************/
 380   3                  case _A0_INPUT_PORT:
 381   3                 /********************/
 382   3      
 383   3      #if((_A0_INPUT_PORT_TYPE == _A0_VGA_PORT) || (_A0_INPUT_PORT_TYPE == _A0_YPBPR_PORT))
 384   3                      if(CSyncScanInputPortVGA())
 385   3                      {
 386   4                          return _TRUE;
 387   4                      }
 388   3                      else
 389   3                      {
 390   4                          break;
 391   4                      }
 392   3      #endif
 393   3                  break;
 394   3      
 395   3      
 396   3                 /********************/
 397   3                  case _A1_INPUT_PORT:
 398   3                 /********************/
 399   3      
 400   3      #if((_A1_INPUT_PORT_TYPE == _A1_VIDEO8_PORT) && (_VIDEO_SUPPORT == _ON))
                              if(CVideoIsExist())
                              {
                                  return _TRUE;
                              }
                              else
                              {
                                  break;
                              }
              #endif
 410   3      
 411   3      
 412   3      #if((_A1_INPUT_PORT_TYPE == _A1_VGA_PORT) || (_A1_INPUT_PORT_TYPE == _A1_YPBPR_PORT))
                              if(CSyncScanInputPortVGA())
                              {
                                  return _TRUE;
                              }
                              else
                              {
                                  break;
                              }
              #endif
 422   3                  break;
 423   3      
 424   3      
 425   3                 /********************/
C51 COMPILER V8.02   SOURCE                                                                03/05/2012 13:24:22 PAGE 8   

 426   3                  case _VI_INPUT_PORT:
 427   3                 /********************/
 428   3      
 429   3      #if(_VI_INPUT_PORT_TYPE == _VI_VIDEO8_PORT)
                              if(CVideoIsExist())
                              {
                                  return _TRUE;
                              }
                              else
                              {
                                  break;
                              }
              #endif
 439   3      
 440   3                  default:
 441   3                  break;
 442   3              }
 443   2          }
 444   1      
 445   1          SET_INPUTSOURCE_TYPE(_SOURCE_NONE);
 446   1          return _FALSE;
 447   1      }
 448          
 449          //--------------------------------------------------
 450          // Description  : Switch Input Port Setting
 451          // Input Value  : None
 452          // Output Value : None
 453          //--------------------------------------------------
 454          void CSourceSwitchPortSetting(void)
 455          {
 456   1          BYTE cnt = 0;
 457   1          BYTE ucOldIndex = 0;
 458   1      
 459   1          ucOldIndex = g_ucSearchIndex;
 460   1      
 461   1      #if(_SOURCE_SEARCH_TYPE_BY_OSD == _ON)
 462   1          if(GET_SOURCE_SEARCH_AUTO() == _TRUE)
 463   1          {
 464   2              SET_SOURCE_STATE(_SOURCE_AUTO_CHANGE_STATE);
 465   2          }
 466   1          else
 467   1          {
 468   2              SET_SOURCE_STATE(_CLR_AUTO_CHANGE_STATE);
 469   2          }
 470   1      #endif
 471   1      
 472   1      #if(_DP_SUPPORT == _ON)
                  if((GET_INPUTPORT_TYPE(g_ucSearchIndex) == _D0_DP_PORT) || (GET_INPUTPORT_TYPE(g_ucSearchIndex) == _D1
             -_DP_PORT))
                  {
                      if((g_bDpDisplayPass == _TRUE) && (g_ucDpPowerStatus != _DP_POWER_DOWN))
                      {
                          g_ucSearchTimes = GET_INPUTPORT_SEARCH_TIMES(g_ucSearchIndex);
                          g_ucSearchFinish = sizeof(tINPUT_PORT);
                          return;
                      }
                  }
              #endif
 483   1      
 484   1          switch(GET_SOURCE_STATE())
 485   1          {
 486   2              case _SOURCE_AUTO_CHANGE_STATE:         // Auto Change Input Source by search priority in the same
C51 COMPILER V8.02   SOURCE                                                                03/05/2012 13:24:22 PAGE 9   

             - group.
 487   2      
 488   2      
 489   2                  if(GET_FIRST_INPUT_PORT_SEARCH())   // Switch to the first priority of input port.
 490   2                  {
 491   3                      CSourceSwitchFirstInputPort();
 492   3                      CLR_FIRST_INPUT_PORT_SEARCH();
 493   3      
 494   3                      if(g_ucSearchIndex == stSystemData.SearchIndex)
 495   3                      {
 496   4                          g_ucSearchFinish--;
 497   4                      }
 498   3                      else
 499   3                      {
 500   4                          break;
 501   4                      }
 502   3                  }
 503   2      
 504   2                  do                                  // Switch to the next port by search priority with group l
             -imit.
 505   2                  {
 506   3                      g_ucSearchIndex = (g_ucSearchIndex + 1) % (sizeof(tINPUT_PORT));
 507   3      
 508   3                      if(g_ucSearchIndex == stSystemData.SearchIndex)
 509   3                      {
 510   4                          continue;
 511   4                      }
 512   3      
 513   3                      g_ucSearchFinish++;
 514   3      
 515   3                      if((GET_INPUTPORT_GROUP(g_ucSearchIndex) == GET_INPUTPORT_GROUP(ucOldIndex)) && (GET_INPUT
             -PORT_TYPE(g_ucSearchIndex) != _NO_PORT))
 516   3                      {
 517   4                          break;
 518   4                      }
 519   3      
 520   3                      cnt++;
 521   3      
 522   3                  }while(cnt < sizeof(tINPUT_PORT));
 523   2      
 524   2                  if(g_ucSearchFinish >= sizeof(tINPUT_PORT) || (cnt >= sizeof(tINPUT_PORT)))
 525   2                  {
 526   3                      g_ucSearchIndex = stSystemData.SearchIndex;
 527   3                      SET_FIRST_INPUT_PORT_SEARCH();
 528   3                  }
 529   2                  break;
 530   2      
 531   2              case _CLR_AUTO_CHANGE_STATE:            // Disable Auto Change Input Source.
 532   2                  g_ucSearchFinish = sizeof(tINPUT_PORT);
 533   2                  break;
 534   2      
 535   2              case _SWITCH_INPUT_SOURCE_STATE:        // Switch Input Source by search priority without group li
             -mit.
 536   2                  g_ucSearchFinish = sizeof(tINPUT_PORT);
 537   2                  break;
 538   2          }
 539   1      
 540   1          g_ucSearchTimes = GET_INPUTPORT_SEARCH_TIMES(g_ucSearchIndex);
 541   1      
 542   1          SET_SEARCH_INITIAL();
 543   1      
 544   1      }
C51 COMPILER V8.02   SOURCE                                                                03/05/2012 13:24:22 PAGE 10  

 545          
 546          //--------------------------------------------------
 547          // Description  : Switch to the First Priority of Input Port in the same group
 548          // Input Value  : None
 549          // Output Value : None
 550          //--------------------------------------------------
 551          void CSourceSwitchFirstInputPort(void)
 552          {
 553   1          BYTE cnt = 0;
 554   1      
 555   1          for(cnt = _SEARCH_POL_0; cnt < sizeof(tINPUT_PORT); cnt++)
 556   1          {
 557   2              if(GET_INPUTPORT_GROUP(cnt) == GET_INPUTPORT_GROUP(g_ucSearchIndex))
 558   2              {
 559   3                  if(cnt != g_ucSearchIndex)
 560   3                  {
 561   4                      break;
 562   4                  }
 563   3              }
 564   2          }
 565   1      
 566   1          if(cnt < sizeof(tINPUT_PORT))
 567   1          {
 568   2              g_ucSearchIndex = cnt;
 569   2          }
 570   1      
 571   1          g_ucSearchFinish++;
 572   1      }
 573          
 574          //--------------------------------------------------
 575          // Description  : Switch Input Port
 576          // Input Value  : Input port type
 577          // Output Value : Return _TRUE if the selected input port is exist
 578          //--------------------------------------------------
 579          bit CSourceSwitchInputPort(BYTE inputport)
 580          {
 581   1          BYTE cnt = 0;
 582   1      
 583   1      #if(_SWITCH_INPUT_SOURCE_OSD == _ON)
 584   1          if(GET_SOURCE_OSD_STATUS())
 585   1          {
 586   2              CLR_SOURCE_OSD_STATUS();
 587   2          }
 588   1      #endif
 589   1      
 590   1          for(cnt = 0; cnt < sizeof(tINPUT_PORT); cnt++)
 591   1          {
 592   2              if((GET_INPUT_PORT(cnt) == inputport) && (GET_INPUTPORT_TYPE(cnt) != _NO_PORT))
 593   2              {
 594   3                  stSystemData.SearchIndex = cnt;
 595   3                  return _TRUE;
 596   3              }
 597   2          }
 598   1      
 599   1          return _FALSE;
 600   1      }
 601          
 602          #if(_SWITCH_INPUT_SOURCE == _ON)
              //--------------------------------------------------
              // Description  : Switch Input Source
              // Input Value  : None
              // Output Value : None
C51 COMPILER V8.02   SOURCE                                                                03/05/2012 13:24:22 PAGE 11  

              //--------------------------------------------------
              void CSourceSwitchInputSource(void)
              {
                  stSystemData.SearchIndex = (stSystemData.SearchIndex + 1) % (sizeof(tINPUT_PORT));
              
              
                  CModeResetMode();
                  SET_SOURCE_STATE(_SWITCH_INPUT_SOURCE_STATE);
              }
              #endif
 617          
 618          //--------------------------------------------------
 619          // Description  : Initial source setting, we have to run this at firmware startup
 620          // Input Value  : None
 621          // Output Value : None
 622          //--------------------------------------------------
 623          void CSourceInitialSetting(void)
 624          {
 625   1          CLR_INPUT_SEARCH_INITIAL();
 626   1          SET_INPUTSOURCE_TYPE(_SOURCE_NONE);
 627   1      
 628   1      #if(_SWITCH_INPUT_SOURCE == _OFF)
 629   1          SET_SOURCE_STATE(_SOURCE_AUTO_CHANGE_STATE);
 630   1          SET_FIRST_INPUT_PORT_SEARCH();
 631   1      #endif
 632   1      
 633   1          g_ucSearchIndex = stSystemData.SearchIndex;
 634   1      #if _DEBUG_MESSAGE_SUPPORT
 635   1                       CDebugMessage("stSystemData.SearchIndex_sourceinitialsetting", stSystemData.SearchIndex) ;
 636   1      #endif
 637   1          g_ucSearchTimes = GET_INPUTPORT_SEARCH_TIMES(g_ucSearchIndex);
 638   1          g_ucSearchFinish = 0;
 639   1      
 640   1          CSourceInitialConnect();
 641   1      
 642   1      #if(_DP_SUPPORT == _ON)
                  SET_INPUT_SOURCE_SEARCH();
              #endif
 645   1      
 646   1      #if(_SWITCH_INPUT_SOURCE_OSD == _ON)
 647   1          CLR_SOURCE_OSD_STATUS();
 648   1      #endif
 649   1      
 650   1          CLR_SEARCH_FINISH();
 651   1      
 652   1          SET_SEARCH_INITIAL();
 653   1      
 654   1      }
 655          
 656          //--------------------------------------------------
 657          // Description  : Initial Connect setting
 658          // Input Value  : None
 659          // Output Value : None
 660          //--------------------------------------------------
 661          void CSourceInitialConnect(void)
 662          {
 663   1      #ifdef _A0_PORT
 664   1          SET_PRE_A0_CONNECT(bA0_CONNECT);
 665   1      #endif
 666   1      
 667   1      #ifdef _A1_PORT
 668   1          SET_PRE_A1_CONNECT(bA1_CONNECT);
C51 COMPILER V8.02   SOURCE                                                                03/05/2012 13:24:22 PAGE 12  

 669   1      #endif
 670   1      
 671   1      #if((_HDMI_SUPPORT == _ON) || (_TMDS_SUPPORT == _ON))
 672   1      
 673   1      #ifdef _D0_PORT
 674   1      
 675   1      #if(_DP_SUPPORT == _ON)
              
              #if(_PCB_TYPE == _RTD2472RD_DEMO_PCB)
                  SET_PRE_D0_CONNECT(CDpAuxPinCableConnect());
              #else
                  SET_PRE_D0_CONNECT(bD0_CONNECT);
              #endif
              
              #endif
 684   1      
 685   1      #endif // End of #if(_DP_SUPPORT == _ON)
 686   1      
 687   1      #ifdef _D1_PORT
 688   1          SET_PRE_D1_CONNECT(bD1_CONNECT);
 689   1      #endif
 690   1      
 691   1      #endif
 692   1      }
 693          
 694          //--------------------------------------------------
 695          // Description  : Save the Search Index and Input Source to Eeprom
 696          // Input Value  : None
 697          // Output Value : None
 698          //--------------------------------------------------
 699          void CSourceSaveSearchData(void)
 700          {
 701   1          stSystemData.SearchIndex = g_ucSearchIndex;
 702   1          CEepromSaveSystemData();
 703   1      }
 704          
 705          //--------------------------------------------------
 706          // Description  : Set Count Down after source stable
 707          // Input Value  : None
 708          // Output Value : None
 709          //--------------------------------------------------
 710          void CSourceSetCountDown(void)
 711          {
 712   1          if((GET_INPUTPORT_TYPE(g_ucSearchIndex) == _D0_DP_PORT) || (GET_INPUTPORT_TYPE(g_ucSearchIndex) == _D1
             -_DP_PORT))
 713   1          {
 714   2              SET_COUNTDOWN_DP_STABLE();             // 500ms for DP
 715   2          }
 716   1          else if((GET_INPUTPORT_TYPE(g_ucSearchIndex) == _D0_HDMI_PORT) || (GET_INPUTPORT_TYPE(g_ucSearchIndex)
             - == _D1_HDMI_PORT) || (GET_INPUTPORT_TYPE(g_ucSearchIndex) == _D0_DVI_PORT) || (GET_INPUTPORT_TYPE(g_ucSearchIndex) == _
             -D1_DVI_PORT) || (GET_INPUTPORT_TYPE(g_ucSearchIndex) == _D0_DVI_I_PORT) || (GET_INPUTPORT_TYPE(g_ucSearchIndex) == _D1_D
             -VI_I_PORT))
 717   1          {
 718   2              if(g_bHDMIHDCPFlag == 1)
 719   2              {
 720   3                  SET_COUNTDOWN_HDMI_HDCP_WORSE();   // 3 secs for HDCP
 721   3              }
 722   2              else
 723   2              {
 724   3                  SET_COUNTDOWN_HDMI_STABLE();         // 300ms for no HDCP
 725   3              }
 726   2          }
C51 COMPILER V8.02   SOURCE                                                                03/05/2012 13:24:22 PAGE 13  

 727   1          else
 728   1          {
 729   2              SET_COUNTDOWN_VGA_STABLE();            // 100ms for VGA
 730   2          }
 731   1      }
 732          
 733          #endif  // End of #if(_SCALER_SERIES_TYPE == _RTD2472D_SERIES)
 734          
 735          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    890    ----
   CONSTANT SIZE    =    149    ----
   XDATA SIZE       =      6    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
